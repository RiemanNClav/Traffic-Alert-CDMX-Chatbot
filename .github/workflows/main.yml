name: Chatbot Prediction Service

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  integration:
        name: Continuous Integration
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v3

          - name: Install Dependencies
            run: |
              sudo apt-get update
              sudo apt-get install -y python3-pip
              pip install --upgrade pip
              pip install -r model/requirements.txt

          # - name: Run training pipeline
          #   run: python artifact.py

          - name: Lint code
            run: echo "Linting repository"

          - name: Run unit tests
            run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          # Construir las im√°genes usando docker-compose
          docker-compose -f serving.docker-compose.yml build

          # Etiquetar y subir cada imagen a ECR
          docker tag trafficv_rasa:latest $ECR_REGISTRY/$ECR_REPOSITORY/rasa:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/rasa:latest

          docker tag trafficv_model:latest $ECR_REGISTRY/$ECR_REPOSITORY/model:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/model:latest

          docker tag trafficv_rasa-action-server:latest $ECR_REGISTRY/$ECR_REPOSITORY/rasa-action-server:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/rasa-action-server:latest

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    env:
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      TWILIO_NUMBER: ${{ secrets.TWILIO_NUMBER }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest images
        run: |
          # Pull each image from ECR
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}/rasa:latest
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}/model:latest
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}/rasa-action-server:latest

      - name: Stop and remove existing containers
        run: |
          # Detener y eliminar contenedores existentes
          docker-compose -f serving.docker-compose.yml down || true

      - name: Run Docker Containers
        run: |
          # Iniciar nuevos contenedores usando Docker Compose con Twilio
          TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }} \
          TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }} \
          TWILIO_NUMBER=${{ secrets.TWILIO_NUMBER }} \
          docker-compose -f serving.docker-compose.yml up -d

      - name: Clean previous images and containers
        run: |
          docker system prune -f
